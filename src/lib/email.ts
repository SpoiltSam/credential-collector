// Email service for secure credential delivery
import nodemailer from 'nodemailer';
import { FormSubmission, ClientInfo } from '@/types';

// Email configuration
const transporter = nodemailer.createTransporter({
  host: process.env.SMTP_HOST,
  port: parseInt(process.env.SMTP_PORT || '587'),
  secure: false, // true for 465, false for other ports
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
});

export interface SendCredentialsEmailOptions {
  submission: FormSubmission;
  clientInfo: ClientInfo;
  encryptedCredentials: string;
  adminEmail?: string;
}

/**
 * Send encrypted credentials to admin email
 */
export async function sendCredentialsEmail({
  submission,
  clientInfo,
  encryptedCredentials,
  adminEmail,
}: SendCredentialsEmailOptions): Promise<void> {
  const to = adminEmail || process.env.ADMIN_EMAIL;
  
  if (!to) {
    throw new Error('Admin email not configured');
  }

  const subject = `Credentials Submitted - ${clientInfo.name} (${clientInfo.company || 'No Company'})`;
  
  const htmlContent = `
    <h2>New Credential Submission</h2>
    
    <h3>Client Information</h3>
    <ul>
      <li><strong>Name:</strong> ${clientInfo.name}</li>
      <li><strong>Email:</strong> ${clientInfo.email}</li>
      ${clientInfo.company ? `<li><strong>Company:</strong> ${clientInfo.company}</li>` : ''}
      ${clientInfo.project ? `<li><strong>Project:</strong> ${clientInfo.project}</li>` : ''}
    </ul>
    
    <h3>Submission Details</h3>
    <ul>
      <li><strong>Submitted At:</strong> ${submission.submittedAt.toISOString()}</li>
      <li><strong>Services:</strong> ${submission.credentials.length}</li>
      ${submission.clientIP ? `<li><strong>Client IP:</strong> ${submission.clientIP}</li>` : ''}
    </ul>
    
    <h3>Services Submitted</h3>
    <ul>
      ${submission.credentials.map(cred => `
        <li>
          <strong>${cred.serviceId}</strong>
          ${cred.isValid !== undefined ? 
            (cred.isValid ? ' ✅ Valid' : ` ❌ Invalid: ${cred.validationError}`) : 
            ' (Not validated)'
          }
        </li>
      `).join('')}
    </ul>
    
    <h3>Encrypted Credentials</h3>
    <p><strong>IMPORTANT:</strong> These credentials are encrypted. Use the decryption utility to access them.</p>
    <textarea readonly style="width: 100%; height: 200px; font-family: monospace; font-size: 12px;">${encryptedCredentials}</textarea>
    
    <hr>
    <p><small>This email was generated by the Credential Collection System</small></p>
  `;

  const textContent = `
New Credential Submission

Client Information:
- Name: ${clientInfo.name}
- Email: ${clientInfo.email}
${clientInfo.company ? `- Company: ${clientInfo.company}\n` : ''}${clientInfo.project ? `- Project: ${clientInfo.project}\n` : ''}

Submission Details:
- Submitted At: ${submission.submittedAt.toISOString()}
- Services: ${submission.credentials.length}
${submission.clientIP ? `- Client IP: ${submission.clientIP}\n` : ''}

Services Submitted:
${submission.credentials.map(cred => `- ${cred.serviceId}${cred.isValid !== undefined ? (cred.isValid ? ' ✅ Valid' : ` ❌ Invalid: ${cred.validationError}`) : ' (Not validated)'}`).join('\n')}

Encrypted Credentials:
${encryptedCredentials}

---
This email was generated by the Credential Collection System
  `;

  try {
    await transporter.sendMail({
      from: process.env.SMTP_USER,
      to,
      subject,
      text: textContent,
      html: htmlContent,
    });
  } catch (error) {
    console.error('Failed to send email:', error);
    throw new Error('Failed to send credentials email');
  }
}

/**
 * Send confirmation email to client
 */
export async function sendClientConfirmationEmail(
  clientInfo: ClientInfo,
  serviceCount: number
): Promise<void> {
  const subject = 'Credentials Received - Thank You';
  
  const htmlContent = `
    <h2>Credentials Received Successfully</h2>
    
    <p>Dear ${clientInfo.name},</p>
    
    <p>Thank you for securely submitting your credentials. We have successfully received and encrypted your information for ${serviceCount} service${serviceCount > 1 ? 's' : ''}.</p>
    
    <p><strong>What happens next:</strong></p>
    <ul>
      <li>Your credentials have been encrypted and sent to our team</li>
      <li>We will begin setting up your integrations</li>
      <li>You will receive updates on the progress</li>
    </ul>
    
    <p><strong>Security Note:</strong> Your credentials were transmitted using end-to-end encryption and are not stored in our systems.</p>
    
    <p>If you have any questions, please don't hesitate to reach out.</p>
    
    <p>Best regards,<br>
    Automate Advisory Team</p>
    
    <hr>
    <p><small>This email was generated by the Credential Collection System</small></p>
  `;

  try {
    await transporter.sendMail({
      from: process.env.SMTP_USER,
      to: clientInfo.email,
      subject,
      html: htmlContent,
    });
  } catch (error) {
    console.error('Failed to send confirmation email:', error);
    // Don't throw error for confirmation email failures
  }
}